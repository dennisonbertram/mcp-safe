# SAFE MCP Server - Product Requirements Document

## Executive Summary

The SAFE MCP Server is a Model Context Protocol (MCP) server that provides AI systems with comprehensive tools to interact with SAFE multisig wallets across multiple blockchain networks. This project enables AI agents to perform wallet operations, query wallet states, manage owners, and execute transactions through a standardized MCP interface.

## Project Vision

**Enable AI systems to securely and efficiently manage SAFE multisig wallets through a standardized, production-ready MCP server interface.**

## Core Objectives

### Primary Goals
1. **AI-Native Wallet Management**: Provide AI systems with native tools to create, configure, and manage SAFE multisig wallets
2. **Multi-Chain Support**: Support major blockchain networks (Ethereum, Polygon, Arbitrum, Optimism, Base, etc.)
3. **Production-Ready Security**: Implement enterprise-grade security practices for key management and transaction handling
4. **Developer Experience**: Offer comprehensive documentation, examples, and templates for easy integration

### Success Metrics
- Support for 9+ major blockchain networks
- Sub-2 second response times for wallet queries
- 100+ concurrent operation capacity
- Zero security incidents in production

## Target Users

### Primary Users
- **AI Application Developers**: Building AI agents that need to interact with multisig wallets
- **DeFi Protocol Teams**: Integrating AI-driven treasury management
- **Enterprise Development Teams**: Implementing AI-assisted financial operations

### Secondary Users
- **Individual AI Enthusiasts**: Personal AI assistants for wallet management
- **Research Teams**: Academic and industry researchers exploring AI-blockchain integration

## Feature Requirements

### 1. Wallet Creation & Management
**Priority: Critical**

#### Wallet Creation Tools
- `safe_create_wallet_config`: Validate and configure wallet parameters
- `safe_predict_address`: Calculate wallet address before deployment
- `safe_deploy_wallet`: Deploy wallet to blockchain with gas estimation

#### Key Features
- Support for custom owner configurations (1-of-1 to N-of-M)
- Deterministic address prediction using CREATE2
- Gas optimization for deployment transactions
- Custom fallback handler support

### 2. Wallet Query & Information
**Priority: Critical**

#### Query Tools
- `safe_get_info`: Comprehensive wallet information retrieval
- `safe_get_owners`: Owner list and threshold information
- `safe_get_balance`: Native and token balance queries
- `safe_get_modules`: Enabled modules and guards inspection
- `safe_get_transaction_hash`: Calculate transaction hash for signing
- `safe_is_transaction_executable`: Check if transaction can be executed
- `safe_get_transaction_history`: Query on-chain transaction history
- `safe_encode_transaction_data`: Encode data for custom contract calls

#### Key Features
- Real-time balance updates
- Transaction history integration (both on-chain and service)
- Module and guard status reporting
- Cross-chain wallet state synchronization
- Direct contract state queries
- Transaction readiness validation
- Gas estimation for direct execution

### 3. Owner Management
**Priority: High**

#### Owner Management Tools
- `safe_add_owner`: Add new wallet owners
- `safe_remove_owner`: Remove existing owners
- `safe_swap_owner`: Replace owner addresses
- `safe_change_threshold`: Modify signature requirements

#### Key Features
- Threshold validation and automatic adjustment
- Multi-signature transaction creation for owner changes
- Security warnings for dangerous operations
- Batch owner operations support

### 4. Module & Guard Management
**Priority: Medium**

#### Module Tools
- `safe_enable_module`: Enable wallet modules
- `safe_disable_module`: Disable wallet modules
- `safe_query_modules`: List available modules

#### Key Features
- Known module registry with security ratings
- Module compatibility verification
- Custom module support with warnings
- Module dependency management

### 5. Transaction Management
**Priority: High**

#### Transaction Tools
- `safe_create_transaction`: Build multi-signature transactions
- `safe_propose_transaction`: Submit transaction to Safe Transaction Service
- `safe_get_pending_transactions`: Retrieve transactions awaiting signatures
- `safe_sign_transaction`: Add signature to pending transaction
- `safe_execute_transaction`: Execute fully signed transactions
- `safe_execute_transaction_direct`: Execute transaction directly on-chain (bypass service)
- `safe_simulate_transaction`: Simulate transaction outcomes
- `safe_send_eth_direct`: Send ETH directly from Safe wallet
- `safe_send_token_direct`: Send tokens directly from Safe wallet
- `safe_contract_interaction`: Direct smart contract interaction from Safe

#### Key Features
- Gas estimation and optimization
- Transaction batching capabilities
- Signature collection management via Safe Transaction Service
- **Direct on-chain execution** without Transaction Service dependency
- Transaction queue management
- Support for multi-agent coordination
- Transaction status tracking and notifications
- **Offline signature collection** for direct execution
- **Custom contract interaction** with ABI encoding

#### Safe Transaction Service Integration
- Centralized transaction proposal storage
- Signature aggregation from multiple agents
- Transaction history and audit trail
- WebSocket support for real-time updates
- REST API for transaction management

#### Direct Contract Interaction
- Execute transactions directly on-chain when all signatures are available
- Bypass Transaction Service for networks without service support
- Local signature collection and management
- Direct contract calls with custom data encoding
- Support for complex DeFi interactions
- Fallback mechanism when Transaction Service is unavailable

### 6. Network & Provider Management
**Priority: Critical**

#### Multi-Network Support
- Support for 9+ major blockchain networks
- Custom RPC provider configuration
- Network-specific contract registries
- Cross-chain operation coordination

#### Supported Networks
- **Mainnets**: 
  - Ethereum (`eip155:1`)
  - Polygon (`eip155:137`)
  - Arbitrum (`eip155:42161`)
  - Optimism (`eip155:10`)
  - Base (`eip155:8453`)
  - Gnosis Chain (`eip155:100`)
- **Testnets**: 
  - Sepolia (`eip155:11155111`)
  - Polygon Mumbai (`eip155:80001`)
  - Arbitrum Sepolia (`eip155:421614`)

#### Key Features
- Automatic network detection and switching using CAIP-2 identifiers
- Provider health monitoring and failover
- API key management for premium RPC providers
- Local network support for development

## Phase 1: Core Infrastructure (Weeks 1-3)
### Week 1: Project Setup & Configuration
1. **Project Initialization**
   - Initialize TypeScript project with strict mode
   - Configure ESLint, Prettier, Husky
   - Set up Jest with ESM support
   - Create basic folder structure

2. **Configuration System**
   - Implement ConfigLoader with multi-source support
   - Add CAIP-2 registry and validation
   - Create environment variable schemas
   - Build configuration merger with priority handling

3. **Network Abstraction**
   - Implement NetworkProviderManager
   - Add provider health monitoring
   - Create fallback mechanisms
   - Set up CAIP-2 to RPC mapping

### Week 2: MCP Server Foundation
1. **Basic MCP Server**
   - Set up McpServer with stdio transport
   - Implement tool registration system
   - Add schema validation with Zod
   - Create error handling framework

2. **SAFE SDK Integration**
   - Integrate protocol-kit, api-kit
   - Create SafeProtocolKit wrapper
   - Implement EthersAdapter
   - Add network-specific configurations

3. **Testing Infrastructure**
   - Set up MCP Inspector integration
   - Create test utilities
   - Implement mock providers
   - Add integration test framework

### Week 3: Core Tools Implementation
1. **Query Tools**
   - `safe_get_info` - Wallet information
   - `safe_get_balance` - Balance queries
   - `safe_get_owners` - Owner list
   - `safe_get_transaction_hash` - Hash calculation

2. **Wallet Creation Tools**
   - `safe_create_wallet_config` - Config validation
   - `safe_predict_address` - Address prediction
   - `safe_deploy_wallet` - Wallet deployment

3. **Direct Execution Tools**
   - `safe_send_eth_direct` - Direct ETH transfers
   - `safe_send_token_direct` - Token transfers
   - `safe_contract_interaction` - Custom calls

## Phase 2: Advanced Features (Weeks 4-6)

### Week 4: Transaction Management
1. **Transaction Service Integration**
   - Implement Safe Transaction Service client
   - Add transaction proposal system
   - Build signature collection logic
   - Create execution coordination

2. **Transaction Tools**
   - `safe_propose_transaction`
   - `safe_get_pending_transactions`
   - `safe_sign_transaction`
   - `safe_execute_transaction`

3. **Batch Operations**
   - Transaction batching support
   - Multi-call optimization
   - Gas estimation improvements

### Week 5: Owner & Module Management
1. **Owner Management Tools**
   - `safe_add_owner`
   - `safe_remove_owner`
   - `safe_swap_owner`
   - `safe_change_threshold`

2. **Module Management**
   - `safe_enable_module`
   - `safe_disable_module`
   - `safe_query_modules`
   - Module compatibility checks

3. **Security Enhancements**
   - Permission validation
   - Operation audit logging
   - Rate limiting implementation

### Week 6: Multi-Network & Production Features
1. **Multi-Network Support**
   - Add all 9+ target networks
   - Network-specific optimizations
   - Cross-chain coordination
   - Service endpoint mapping

2. **Production Hardening**
   - Performance optimization
   - Enhanced error recovery
   - Monitoring integration
   - Documentation completion

3. **Claude Desktop Integration**
   - Create installation guide
   - Add example configurations
   - Build demo workflows
   - Test all features end-to-end

## Technology Stack

### Core Dependencies (Pinned Versions)
- **MCP SDK**: `@modelcontextprotocol/sdk@^1.12.1` - MCP protocol implementation
- **SAFE Protocol Kit**: `@safe-global/protocol-kit@^4.0.0` - Core Safe wallet interactions
- **SAFE API Kit**: `@safe-global/api-kit@^2.4.0` - Transaction Service API client
- **SAFE Relay Kit**: `@safe-global/relay-kit@^3.0.0` - Gasless transaction support
- **Ethers.js**: `ethers@^6.11.0` - Blockchain interaction and provider management
- **Zod**: `zod@^3.22.0` - Schema validation and type safety
- **TypeScript**: `typescript@^5.3.0` - Type-safe development with strict mode

### Development Tools
- **Jest**: `jest@^29.7.0` - Testing framework with ESM support
- **ts-jest**: `ts-jest@^29.1.0` - TypeScript support for Jest
- **ESLint**: `eslint@^8.56.0` - Code quality enforcement
- **Prettier**: `prettier@^3.2.0` - Code formatting
- **Husky**: `husky@^9.0.0` - Git hooks for quality gates
- **tsx**: `tsx@^4.7.0` - TypeScript execution for development

## Testing Strategy

### Unit Testing (Continuous)
- Tool handler logic
- Configuration parsing
- Network management
- CAIP-2 resolution

### Integration Testing (Weekly)
- MCP Inspector validation
- Network provider testing
- Safe SDK integration
- Transaction flow testing

### End-to-End Testing (Phase completion)
- Claude Desktop integration
- Multi-agent scenarios
- Network failover
- Performance benchmarks

## Success Criteria

### Phase 1: Core Functionality (Weeks 1-3)
- Basic wallet creation and management tools
- Support for Ethereum mainnet and Sepolia testnet
- MCP server with stdio transport
- Direct smart contract interaction (bypass Transaction Service)
- Local signature collection and execution
- Flexible configuration system (env, file, runtime)
- Comprehensive unit test coverage (>80%)

### Phase 2: Production Readiness (Weeks 4-6)
- Multi-network support (9+ networks)
- HTTP and WebSocket transport support
- Safe Transaction Service integration
- Hybrid execution mode (service + direct fallback)
- Security audit completion
- Performance optimization (sub-2s queries)

## Documentation Deliverables

### Phase 1 Documentation
- Installation guide
- Basic usage examples
- Configuration reference
- Troubleshooting guide

### Phase 2 Documentation
- Advanced features guide
- Multi-agent tutorials
- API reference
- Performance tuning guide 
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../common";
import type { MockSafeProxy, MockSafeProxyInterface } from "../MockSafeProxy";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_singleton",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
] as const;

const _bytecode =
  "0x60a060405234801561001057600080fd5b5060405161010638038061010683398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b608051607e610088600039600060060152607e6000f3fe60806040527f00000000000000000000000000000000000000000000000000000000000000003660008037600080366000845af43d6000803e8080156043573d6000f35b3d6000fdfea2646970667358221220c92918dd6b37816766339eea9459e13b0da3a42331ba88cc1e12417afd9ee85464736f6c63430008130033";

type MockSafeProxyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockSafeProxyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockSafeProxy__factory extends ContractFactory {
  constructor(...args: MockSafeProxyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _singleton: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_singleton, overrides || {});
  }
  override deploy(
    _singleton: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_singleton, overrides || {}) as Promise<
      MockSafeProxy & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockSafeProxy__factory {
    return super.connect(runner) as MockSafeProxy__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockSafeProxyInterface {
    return new Interface(_abi) as MockSafeProxyInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MockSafeProxy {
    return new Contract(address, _abi, runner) as unknown as MockSafeProxy;
  }
}
